//
// Created by gerben stavenga on 6/25/23.
//

#include "descriptors.h"

#include "x86_inst.h"
#include "src/freestanding/utils.h"

alignas(4096) uint8_t kernel_stack[4096];

DescriptorEntry gdt[6] = {
        {},
        MakeSegDesc(true, true, 0),  // cs = 0x8
        MakeSegDesc(true, false, 0),  // ds = 0x10
        MakeSegDesc(true, true, 3),  // cs = 0x18
        MakeSegDesc(true, false, 3),  // ds = 0x20
        {}, // TSS
//        {0xFFFF, kernel_access_cs, k16_flags},  // cs = 0x28
//        {0xFFFF, kernel_access_ds, k16_flags},  // ds = 0x30
};

constexpr int kIdtEntries = 0x81;
IdtEntry idt[kIdtEntries];

TSS task_state_segment(kernel_stack + sizeof(kernel_stack), kKernelDS);

extern "C" uint64_t int_vector[];

void SetupDescriptorTables() {
    // CPU exceptions
    for (int i = 0; i < 48; i++) {
        int dpl = (i >= 3 && i <= 5) ? 3 : 0;  // int3, into and bounds exception may be generated by users
        idt[i] = MakeInterruptGate(int_vector + i, dpl);
    }
    // Set int 0x80 syscall
    idt[0x80] = MakeInterruptGate(int_vector + 48, 3);

    gdt[5] = MakeTSSDescriptor(&task_state_segment);

    LoadGDT(gdt, sizeof(gdt));
    LoadIDT(idt, sizeof(idt));
    LoadTR(kTSS);

    // Reload all segments
    asm volatile (
            "mov %0, %%ds\n\t"
            "mov %0, %%es\n\t"
            "mov %0, %%fs\n\t"
            "mov %0, %%gs\n\t"
            "ljmpl %1, $1f\n\t"  // use jmp to reload cs
            "1:\n\t"
            ::"r"(kKernelDS), "i"(kKernelCS));
}

